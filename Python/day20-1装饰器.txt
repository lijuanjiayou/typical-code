装饰器：本质就是函数，功能是为其他函数添加附件功能

原则：
1.不修改被修饰函数的源代码
2.不修改被修饰函数的调用方式

装饰器的知识储备：
装饰器=高阶函数+函数嵌套+闭包

高阶函数：
1.函数接收的参数是一个函数名
（实现了在不修改源代码的情况下添加附件功能）
2.函数的返回值是一个函数名
（实现了函数的调用方式也不用修改了）
3.满足上述任意一个都可称之为高阶函数 

函数嵌套：
在函数中定义另一个函数

闭包：
闭就是封装的意思，封装变量
包就是层 

@timmer 就相当于test=timmer(test)

args=(“林海峰”）接收的是元祖
kwargs={"a":1,"b":2} 接收的是字典

def wrapper(*args,**kwargs):
    res=func(*args,**kwargs)
(*args,**kwargs)代表所有参数，接收的所有参数都原封不动的返回给res













